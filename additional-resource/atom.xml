<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Additional-resources on Writing an OS in Rust</title>
    <link>http://os.phil-opp.com/additional-resource.html</link>
    <description>Recent content in Additional-resources on Writing an OS in Rust</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>dev@phil-opp.com (Philipp Oppermann)</managingEditor>
    <webMaster>dev@phil-opp.com (Philipp Oppermann)</webMaster>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Thu, 07 Jul 2016 07:13:24 +0000</lastBuildDate>
    <atom:link href="http://os.phil-opp.com/additional-resource/atom.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Cross Compile Binutils</title>
      <link>http://os.phil-opp.com/cross-compile-binutils.html</link>
      <pubDate>Thu, 07 Jul 2016 07:13:24 +0000</pubDate>
      <author>dev@phil-opp.com (Philipp Oppermann)</author>
      <guid>http://os.phil-opp.com/cross-compile-binutils.html</guid>
      <description>

&lt;p&gt;The &lt;a href=&#34;https://www.gnu.org/software/binutils/&#34;&gt;GNU Binutils&lt;/a&gt; are a collection of various binary tools such as &lt;code&gt;ld&lt;/code&gt;, &lt;code&gt;as&lt;/code&gt;, &lt;code&gt;objdump&lt;/code&gt;, or &lt;code&gt;readelf&lt;/code&gt;. These tools are platform-specific, so you need to compile them again if your host system and target system are different. In our case, we need &lt;code&gt;ld&lt;/code&gt; and &lt;code&gt;objdump&lt;/code&gt; for the x86_64 architecture.&lt;/p&gt;

&lt;h2 id=&#34;building-setup&#34;&gt;Building Setup&lt;/h2&gt;

&lt;p&gt;First, you need to download a current binutils version from &lt;a href=&#34;ftp://sourceware.org/pub/binutils/snapshots&#34;&gt;here&lt;/a&gt; (the latest one is near the bottom). After extracting, you should have a folder named &lt;code&gt;binutils-2.X&lt;/code&gt; where &lt;code&gt;X&lt;/code&gt; is for example &lt;code&gt;25.1&lt;/code&gt;. Now can create and switch to a new folder for building (recommended):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;mkdir build-binutils
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; build-binutils
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;We execute binutils&amp;rsquo;s &lt;code&gt;configure&lt;/code&gt; and pass a lot of arguments to it (replace the &lt;code&gt;X&lt;/code&gt; with the version number):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;../binutils-2.X/configure --target&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;x86_64-elf --prefix&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/opt/cross&amp;quot;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
    --disable-nls --disable-werror &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
    --disable-gdb --disable-libdecnumber --disable-readline --disable-sim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;target&lt;/code&gt; argument specifies the the x86_64 target architecture.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;prefix&lt;/code&gt; argument selects the installation directory, you can change it if you like. But be careful that you do not overwrite your system&amp;rsquo;s binutils.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;disable-nls&lt;/code&gt; flag disables native language support (so you&amp;rsquo;ll get the same english error messages). It also reduces build dependencies.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;disable-werror&lt;/code&gt; turns all warnings into errors.&lt;/li&gt;
&lt;li&gt;The last line disables features we don&amp;rsquo;t need to reduce compile time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;building-it&#34;&gt;Building it&lt;/h2&gt;

&lt;p&gt;Now we can build and install it to the location supplied as &lt;code&gt;prefix&lt;/code&gt; (it will take a while):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;make
make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you should have multiple &lt;code&gt;x86_64-elf-XXX&lt;/code&gt; files in &lt;code&gt;$HOME/opt/cross/bin&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;adding-it-to-the-path&#34;&gt;Adding it to the PATH&lt;/h2&gt;

&lt;p&gt;To use the tools from the command line easily, you should add the &lt;code&gt;bin&lt;/code&gt; folder to your PATH:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/opt/cross/bin:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you add this line to your e.g. &lt;code&gt;.bashrc&lt;/code&gt;, the &lt;code&gt;x86_64-elf-XXX&lt;/code&gt; commands are always available.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cross Compiling: libcore</title>
      <link>http://os.phil-opp.com/cross-compile-libcore.html</link>
      <pubDate>Thu, 07 Jul 2016 07:13:24 +0000</pubDate>
      <author>dev@phil-opp.com (Philipp Oppermann)</author>
      <guid>http://os.phil-opp.com/cross-compile-libcore.html</guid>
      <description>

&lt;p&gt;So you&amp;rsquo;re getting an &lt;code&gt;error: can&#39;t find crate for `core` [E0463]&lt;/code&gt; when using &lt;code&gt;--target x86_64-unknown-linux-gnu&lt;/code&gt;. That means that you&amp;rsquo;re not running Linux or not using using a x86_64 processor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you have an x86_64 processor and want a quick fix&lt;/strong&gt;, try it with &lt;code&gt;x86_64-pc-windows-gnu&lt;/code&gt; or &lt;code&gt;x86_64-apple-darwin&lt;/code&gt; (or simply omit the explicit &lt;code&gt;--target&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The idiomatic alternative and the only option for non x86_64 CPUs is described below. Note that you need to &lt;a href=&#34;http://os.phil-opp.com/cross-compile-binutils.html&#34;&gt;cross compile binutils&lt;/a&gt;, too.&lt;/p&gt;

&lt;h2 id=&#34;libcore&#34;&gt;Libcore&lt;/h2&gt;

&lt;p&gt;The core library is a dependency-free library that is added implicitly when using &lt;code&gt;#![no_std]&lt;/code&gt;. It provides basic standard library features like Option or Iterator. The core library is installed together with the rust compiler (just like the std library). But the installed libcore is specific to your architecture. If you aren&amp;rsquo;t working on x86_64 Linux and pass &lt;code&gt;‑‑target x86_64‑unknown‑linux‑gnu&lt;/code&gt; to cargo, it can&amp;rsquo;t find a x86_64 libcore. To fix this, you can either download it or build it using cargo.&lt;/p&gt;

&lt;h2 id=&#34;download-it&#34;&gt;Download it&lt;/h2&gt;

&lt;p&gt;You need to download the 64-bit Linux Rust build corresponding to your installed nightly. You can either just update to the current nightly and download the current nightly source &lt;a href=&#34;https://www.rust-lang.org/downloads.html&#34;&gt;here&lt;/a&gt;. Or you retrieve your installed version through &lt;code&gt;rustc --version&lt;/code&gt; and search the corresponding subfolder &lt;a href=&#34;http://static.rust-lang.org/dist/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After extracting it and you need to copy the &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt; folder in &lt;code&gt;rust-std-x86_64-unknown-linux-gnu/lib/rustlib&lt;/code&gt; to your local Rust installation. For multirust, the right target folder is &lt;code&gt;~/.multirust/toolchains/nightly/lib/rustlib&lt;/code&gt;. That&amp;rsquo;s it!&lt;/p&gt;

&lt;h2 id=&#34;build-it-using-cargo&#34;&gt;Build it using cargo&lt;/h2&gt;

&lt;p&gt;The alternative is to use cargo to build libcore. But this variant has one big disadvantage: You have to modify each crate you depend on because it needs to use the same libcore. So you can&amp;rsquo;t just add a crates.io dependency anymore, you need to fork and modify it first.&lt;/p&gt;

&lt;p&gt;If you want to build libcore anyway, you need its source code. You can either clone the &lt;a href=&#34;https://github.com/rust-lang/rust&#34;&gt;rust repository&lt;/a&gt; (makes updates easy) or manually &lt;a href=&#34;https://www.rust-lang.org/downloads.html&#34;&gt;download the Rust source&lt;/a&gt; (faster and less memory).&lt;/p&gt;

&lt;p&gt;Now we create a new cargo project named &lt;code&gt;core&lt;/code&gt;, but delete its &lt;code&gt;src&lt;/code&gt; folder:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;cargo new core
rm -r core/src
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then we create a symbolic link named &lt;code&gt;src&lt;/code&gt; to the &lt;code&gt;rust/src/libcore&lt;/code&gt; of the Rust source code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;ln -s ../rust/src/libcore core/src
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To use our new libcore crate (instead of the one installed together with rust) in our OS, we need to add it as a local dependency in the &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dependencies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;core&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;core&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now cargo compiles libcore for all Rust targets automatically.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Set Up GDB</title>
      <link>http://os.phil-opp.com/set-up-gdb.html</link>
      <pubDate>Thu, 07 Jul 2016 07:13:24 +0000</pubDate>
      <author>dev@phil-opp.com (Philipp Oppermann)</author>
      <guid>http://os.phil-opp.com/set-up-gdb.html</guid>
      <description>

&lt;p&gt;There are a lot of things that can go wrong when developing an OS. So it&amp;rsquo;s a good idea to add a debugger to our toolset, which allows us to set breakpoints and examine variables. We will use &lt;a href=&#34;https://www.gnu.org/software/gdb/&#34;&gt;GDB&lt;/a&gt; as QEMU supports it out of the box.&lt;/p&gt;

&lt;h3 id=&#34;qemu-parameters&#34;&gt;QEMU parameters&lt;/h3&gt;

&lt;p&gt;To make QEMU listen for a gdb connection, we add the &lt;code&gt;-s&lt;/code&gt; flag to the &lt;code&gt;run&lt;/code&gt; target in our Makefile:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;iso&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
	@qemu-system-x86_64 -cdrom &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;iso&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; -s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This allows us to connect a debugger at any time, for example to investigate why a panic occurred.&lt;/p&gt;

&lt;p&gt;To wait for a debugger connection on startup, we add a &lt;code&gt;debug&lt;/code&gt; target to the Makefile:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;iso&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
	@qemu-system-x86_64 -cdrom &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;iso&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; -s -S
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is identical to the &lt;code&gt;run&lt;/code&gt; target except for the additional &lt;code&gt;-S&lt;/code&gt; flag. This flag causes QEMU to freeze on startup and wait until a debugger is connected. Now it &lt;em&gt;should&lt;/em&gt; be possible to connect gdb.&lt;/p&gt;

&lt;h3 id=&#34;the-annoying-issue&#34;&gt;The annoying issue&lt;/h3&gt;

&lt;p&gt;Unfortunately gdb has an issue with the switch to long mode. If we connect when the CPU is already in long mode, everything works fine. But if we use &lt;code&gt;make debug&lt;/code&gt; and thus connect right at the start, we get an error when we set a breakpoint in 64-bit mode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Remote &#39;g&#39; packet reply is too long: [a very long number]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This issue is known &lt;a href=&#34;http://www.cygwin.com/ml/gdb-patches/2012-03/msg00116.html&#34;&gt;since 2012&lt;/a&gt; but it is still not fixed. Maybe we find the reason in the &lt;a href=&#34;https://sourceware.org/bugzilla/show_bug.cgi?id=13984#c11&#34;&gt;issue thread&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;from my (limited) experience, unless you ping the gdb-patches list weekly, this patch is more likely to remain forgotten :-)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pretty frustrating, especially since the patch is &lt;a href=&#34;https://github.com/phil-opp/binutils-gdb/commit/9e88c451844ad38bb82fe77d1f388c87c41b4520&#34;&gt;very small&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;building-the-patched-gdb&#34;&gt;Building the patched GDB&lt;/h3&gt;

&lt;p&gt;So the only way to use gdb with &lt;code&gt;make debug&lt;/code&gt; is to build a modified gdb version that includes the patch. I created a repository with the patched GDB to make this easy. Just follow &lt;a href=&#34;https://github.com/phil-opp/binutils-gdb#gdb-for-64-bit-rust-operating-systems&#34;&gt;the build instructions&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;connecting-gdb&#34;&gt;Connecting GDB&lt;/h3&gt;

&lt;p&gt;Now you should have a &lt;code&gt;rust-os-gdb&lt;/code&gt; subfolder. In its &lt;code&gt;bin&lt;/code&gt; directory you find the &lt;code&gt;gdb&lt;/code&gt; executable and the &lt;code&gt;rust-gdb&lt;/code&gt; script, which &lt;a href=&#34;https://michaelwoerister.github.io/2015/03/27/rust-xxdb.html&#34;&gt;improves rendering of Rust types&lt;/a&gt;. To make it easy to use it for our OS, we add a &lt;code&gt;make gdb&lt;/code&gt; target to our Makefile:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;gdb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
	@rust-os-gdb/bin/rust-gdb &lt;span class=&#34;s2&#34;&gt;&amp;quot;build/kernel-x86_64.bin&amp;quot;&lt;/span&gt; -ex &lt;span class=&#34;s2&#34;&gt;&amp;quot;target remote :1234&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It loads the debug information from our kernel binary and connects to the &lt;code&gt;localhost:1234&lt;/code&gt; port, on which QEMU listens by default.&lt;/p&gt;

&lt;h3 id=&#34;using-gdb&#34;&gt;Using GDB&lt;/h3&gt;

&lt;p&gt;After connecting to QEMU, you can use various gdb commands to control execution and examine data. All commands can be abbreviated as long they are still unique. For example, you can write &lt;code&gt;c&lt;/code&gt; or &lt;code&gt;cont&lt;/code&gt; instead of &lt;code&gt;continue&lt;/code&gt;. The most important commands are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;help&lt;/code&gt; or &lt;code&gt;h&lt;/code&gt;: Show the help.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt;: Set a breakpoint. It possible to break on functions such as &lt;code&gt;rust_main&lt;/code&gt; or on source lines such as &lt;code&gt;lib.rs:42&lt;/code&gt;. You can use tab for autocompletion and omit parts of the path as long it&amp;rsquo;s still unique. To modify breakpoints, you can use &lt;code&gt;disable&lt;/code&gt;, &lt;code&gt;enable&lt;/code&gt;, and &lt;code&gt;delete&lt;/code&gt; plus the breakpoint number.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;continue&lt;/code&gt; or &lt;code&gt;c&lt;/code&gt;: Continue execution until a breakpoint is reached.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;next&lt;/code&gt; or &lt;code&gt;n&lt;/code&gt;: Step over the current line and break on the next line of the function. Sometimes this doesn&amp;rsquo;t work in Rust OSes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;step&lt;/code&gt; or &lt;code&gt;s&lt;/code&gt;: Step into the current line, i.e. jump to the called function. Sometimes this doesn&amp;rsquo;t work in Rust OSes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt; or &lt;code&gt;l&lt;/code&gt;: Shows the source code around the current position.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print&lt;/code&gt; or &lt;code&gt;p&lt;/code&gt;: Prints the value of a variable. You can use Cs &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;&amp;amp;&lt;/code&gt; operators. To print in hexadecimal, use &lt;code&gt;p/x&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tui enable&lt;/code&gt;: Enables the text user interface, which provides a graphical interface (see below). To disable it again, run &lt;code&gt;tui disable&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;images/gdb-tui-screenshot.png&#34; alt=&#34;gdb text user interface&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Of course there are many more commands. Feel free to send a PR if you think this list is missing something important. For a more complete GDB overview, check out &lt;a href=&#34;http://beej.us/guide/bggdb/&#34;&gt;Beej&amp;rsquo;s Quick Guide&lt;/a&gt; or the &lt;a href=&#34;http://www.eecs.harvard.edu/~cs161/resources/gdb.html&#34;&gt;website for Harvard&amp;rsquo;s CS161 course&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>